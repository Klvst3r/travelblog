
# Login
//Genera las vistas y las rutas para un login y registro basico, necesario ejecutar al principio del desarrollo, ya que genera algunos archivos que pueden interferir con el desarrollo.

		php artisan make:auth  

Si necesitamos revisar las opciones 
	php artisan -h make:auth

Para laravel 9, y 10' queremso aplicar nuestros login personalizado y aplicar las directivas de seguridad y autentificacion de usuarios.


En Laravel 10, el comando php artisan make:auth ya no existe y fue eliminado desde Laravel 6 en adelante. En versiones modernas como Laravel 12, la autenticación se maneja utilizando Laravel Breeze, Laravel Jetstream, Laravel Fortify, o Laravel UI, según tus necesidades.



Solución recomendada: Instalar Laravel Breeze
--------------------------------------------

Laravel Breeze es una implementación mínima y moderna de autenticación que es ideal para comenzar.
1. Instalar Breeze

composer require laravel/breeze --dev

2. Generar los archivos de autenticación

php artisan breeze:install

3. Ejecutar migraciones

php artisan migrate

4. Instalar y compilar los assets (requiere Node.js y npm)

npm install && npm run dev

5. Levantar el servidor de desarrollo

php artisan serve

Ahora ya tendrás un sistema de autenticación básico con vistas Blade en tu proyecto Laravel 12.



Alternativas a Breeze -> Laravel UI
-----------------------------------

Laravel Jetstream es más robusto, incluye gestión de sesiones, autenticación de dos factores, entre otras caracteristicas

En nuestro caso vamos a implementar Laravel Laravel UI para seguir usando Bootstrap/jQuery y el sistema de vistas Blade clásico.

Para usar laravel/ui, ejecutamos los siguientes comandos:

    $ composer require laravel/ui

Esto modificara el composer.json, composer.lock para agregar los nuevos paquetes a nuestra aplicación en nuestro caso sera la version 4.6 de Larvel/UI

Instalamos el paquete con:

    $ php artisan ui bootstrap --auth

Esto nos sustituira el controlador Controller.php, como nuestra aplicación es recien creada no existe mayor probvlema, pero si ya tenemos modificadas las clases y metodos en este controlador, debemos respaldar por que sera sustituido.

app/Http/Auth/Conntroller.php

Yaque se la autentificacion escalfoldingy boostrap,



Con el comando anterior y la creación del scaffolding tenemos los siguientes archivos

  resources/js/bootstrap.js
  routes/web.php
  vite.config.js

Y los archivos para trabajar:

    app/Http/Controllers/Auth/                                                  => Controlador de autenticación
    app/Http/Controllers/HomeController.php                                     => Controlador de inicio
    database/migrations/2014_10_12_100000_create_password_resets_table.php      => Migracion para la autenticacion
    resources/sass/                                                             => Recursos SASS
    resources/views/auth/                                                       => Vistas de autenticacion
    resources/views/home.blade.php                                              => Plantilla de inicio
    resources/views/layouts/                                                    => Vistas del layout

    

ahora debemos ejecutar el siguiente comando para compilar el scaffolding
    $ npm install && npm run dev

Scaffold es una herramienta que nos ofrece Laravel para poder generar una estructura básica del CRUD de un modelo en nuestros proyectos.

CRUD

El término CRUD representa las cuatro operaciones básicas de una aplicación web:

Crear (Create), Leer (Read), Actualizar (Update) y Eliminar (Delete)

Tradicionalmente lo que hariamos sería escribir manualmente cada uno de los componentes necesarios para crear el CRUD, esto significa definir el controlador, el modelo, las vistas y las rutas uno por uno.  

Con solo una simple línea de comando, generamos automáticamente el conjunto de controladores, modelos, vistas y rutas necesarios para administrar ese modelo en la base de datos.


Como se creao una nueva mocgración para los usuarios debemos ejecutar nuevamente las igraciones pendientes.
    $ php artisan migrate



El comando 

   $php artisan ui bootstrap --auth genera un scaffolgind para trabajar con autenticación, para ello 

Dentro de las vistas generara los siguiente;

resources/views/auth/
	/passwords				Recuperqcion de contraseña
	login.blade.php			login de acceso
	register.blade.php		recuperación de contraseña
    verify.blade.php        Verificacion de autenticación



En el archivo de rutas web.php
Si agregamos la ruta auth

    Route::auth();  Metodo especial para crear las tutas para registro, login y recuperacion de contraseña


En el navegador podemos ahora tener el formulario de loin desde

    localhost/login

Ahora tenemos un avista de Login con Laravel UI, tenemos tambien register

    localhost/register

Cuando ejecutamos el comando inicial para la creación de nuestro login, estas vistas aparecen con bootstrap CSS.

Vamos a deshabilitar el registro de usuarios





Tiene las siguientes opciones:

-- views para generar las vistas de autenticación

Ejecutamos

	$ php artisan make:auth --views

Si despues de haber cipiado las rutas de login

//Rutas de autenticacion
Route::get('login','Auth\LoginController@showLoginForm')->name('login');
Route::post('login','Auth\LoginController@login');
Route::post('logout','Auth\LoginController@logout')->name('logout');

Y vamos a localhost:login, nos generara un erro, no indicara que no existe y esto es por que en la vista login, estamos estendiendo 
layout.app y si abrirmos
    app.blade.php buscando register, es donde se hace referencia a la ruta que no existe de register

    /home/klvst3r/dev/laravel/travelblog/resources/views/layouts/app.blade.php


No indica un error

    Target class [Auth\LoginController] does not exist

significa que Laravel no puede encontrar la clase Auth\LoginController porque la notación de la ruta es antigua o incorrecta para Laravel 8 en adelante, donde se usa PHP 8 con auto-importación de clases (resolución por namespaces).


Agrega use al principio del archivo routes/web.php

use App\Http\Controllers\Auth\LoginController;
use App\Http\Controllers\Auth\RegisterController;

Y luego en tus rutas:

// Rutas de autenticación modernas
Route::get('login', [LoginController::class, 'showLoginForm'])->name('login');
Route::post('login', [LoginController::class, 'login']);
Route::post('logout', [LoginController::class, 'logout'])->name('logout');

Opción 2: Usar el namespace completo directamente estas estaran comentadas momentaneamante

// Route::get('login', [App\Http\Controllers\Auth\LoginController::class, 'showLoginForm'])->name('login');
// Route::post('login', [App\Http\Controllers\Auth\LoginController::class, 'login']);
// Route::post('logout', [App\Http\Controllers\Auth\LoginController::class, 'logout'])->name


Si también necesitas registro, agrega:

//use App\Http\Controllers\Auth\RegisterController;

//Route::get('register', [RegisterController::class, 'showRegistrationForm'])->name('register');
//Route::post('register', [RegisterController::class, 'register']);

Ahora vamos a login:8000/login y el problema se habra solucionado.

no se va a utilizar el archivo

layout/app.blade.php

Por que tenemos la plantilla de administración admin.layout

cambiamos por
    @extends('admin.layout')

Ahora nuestro login tiene nuestro layout de administración    

Modificación del Template 
    login.blade.php

Adecuación de estilos, y contenidos del formulario, token y metodos del formualario.



Clonar del proyecto despues del login
-----------------------

Nuestro proyecto se ha actualizado en un equipo diferente del que se creo, 

 git pull origin login
From github.com:Klvst3r/travelblog
 * branch            login      -> FETCH_HEAD
Updating d958c0a..4fba705
Fast-forward
 README.md                                                             |   11 +-
 app/Http/Controllers/Auth/ConfirmPasswordController.php               |   39 +
 app/Http/Controllers/Auth/ForgotPasswordController.php                |   22 +
 app/Http/Controllers/Auth/LoginController.php                         |   40 +
 app/Http/Controllers/Auth/RegisterController.php                      |   72 +
 app/Http/Controllers/Auth/ResetPasswordController.php                 |   29 +
 app/Http/Controllers/Auth/VerificationController.php                  |   41 +
 app/Http/Controllers/HomeController.php                               |   28 +
 composer.json                                                         |    3 +-
 composer.lock                                                         |   65 +-
 .../migrations/2014_10_12_100000_create_password_resets_table.php     |   32 +
 doc/login/1. Login                                                    |  217 +
 package-lock.json                                                     | 1666 +++++
 package.json                                                          |    3 +
 public/dashboard/bootstrap/css/bootstrap.css                          |    2 +-
 public/dashboard/build/css/bootstrap.css                              | 9727 ++++++++++++++++++++++++++++++
 public/dashboard/build/css/bootstrap.min.css                          |    7 +
 public/dashboard/build/css/custom.css                                 |  225 +-
 public/dashboard/build/css/style.css                                  | 4921 +++++++++++++++
 public/dashboard/build/css/style_002.css                              |  208 +
 public/img/escudo-gris.png                                            |  Bin 0 -> 78014 bytes
 resources/js/bootstrap.js                                             |    4 +-
 resources/sass/_variables.scss                                        |    7 +
 resources/sass/app.scss                                               |    8 +
 resources/views/admin/layout.blade.php                                |    2 +-
 resources/views/auth/login.blade.php                                  |  128 +
 resources/views/auth/login_backup.blade.php                           |   74 +
 resources/views/auth/passwords/confirm.blade.php                      |   49 +
 resources/views/auth/passwords/email.blade.php                        |   47 +
 resources/views/auth/passwords/reset.blade.php                        |   65 +
 resources/views/auth/register.blade.php                               |   77 +
 resources/views/auth/verify.blade.php                                 |   28 +
 resources/views/home.blade.php                                        |   23 +
 resources/views/layouts_backup/app.blade.php                          |   80 +
 routes/web.php                                                        |   36 +
 vite.config.js                                                        |    5 +-
 36 files changed, 17968 insertions(+), 23 deletions(-)
 create mode 100644 app/Http/Controllers/Auth/ConfirmPasswordController.php
 create mode 100644 app/Http/Controllers/Auth/ForgotPasswordController.php
 create mode 100644 app/Http/Controllers/Auth/LoginController.php
 create mode 100644 app/Http/Controllers/Auth/RegisterController.php
 create mode 100644 app/Http/Controllers/Auth/ResetPasswordController.php
 create mode 100644 app/Http/Controllers/Auth/VerificationController.php
 create mode 100644 app/Http/Controllers/HomeController.php
 create mode 100644 database/migrations/2014_10_12_100000_create_password_resets_table.php
 create mode 100644 doc/login/1. Login
 create mode 100644 package-lock.json
 create mode 100644 public/dashboard/build/css/bootstrap.css
 create mode 100644 public/dashboard/build/css/bootstrap.min.css
 create mode 100644 public/dashboard/build/css/style.css
 create mode 100644 public/dashboard/build/css/style_002.css
 create mode 100644 public/img/escudo-gris.png
 create mode 100644 resources/sass/_variables.scss
 create mode 100644 resources/sass/app.scss
 create mode 100644 resources/views/auth/login.blade.php
 create mode 100644 resources/views/auth/login_backup.blade.php
 create mode 100644 resources/views/auth/passwords/confirm.blade.php
 create mode 100644 resources/views/auth/passwords/email.blade.php
 create mode 100644 resources/views/auth/passwords/reset.blade.php
 create mode 100644 resources/views/auth/register.blade.php
 create mode 100644 resources/views/auth/verify.blade.php
 create mode 100644 resources/views/home.blade.php
 create mode 100644 resources/views/layouts_backup/app.blade.php

enciendo el servidor con
php artisan serve --port=8000 y ahora intento visualizar mis cambios del login en la ruta:
http://localhost:8000/login

Marcandome el siguiente error:
Symfony \ Component \ ErrorHandler \ Error \ FatalError
PHP 8.2.28
10.48.29
Trait "Illuminate\Foundation\Auth\AuthenticatesUsers" not found


El error:

    Trait "Illuminate\Foundation\Auth\AuthenticatesUsers" not found

significa que Laravel no encuentra el trait AuthenticatesUsers, el cual es esencial para el funcionamiento del LoginController.

Causa más común

Esto normalmente ocurre cuando:

    Faltan dependencias necesarias, particularmente si no se ha ejecutado composer install después de clonar o actualizar el repositorio.

    El archivo del trait no existe (lo cual es raro si estás usando Laravel UI).

    El autoload de Composer está desactualizado.

Para dar solución ejecutamos:


    $ composer install

Esto descargará todas las dependencias necesarias, incluidas las del sistema de autenticación (como el trait AuthenticatesUsers).

2. (Opcional pero recomendable): Limpia y regenera el autoload

    $ composer dump-autoload

3. Verifica el Trait

Abrimos el archivo app/Http/Controllers/Auth/LoginController.php y asegúrate de que tengas esta línea:

    use Illuminate\Foundation\Auth\AuthenticatesUsers;

Y que esté siendo usado:

    class LoginController extends Controller
    {
        use AuthenticatesUsers;
    }

4. Reinicia el servidor

Después de estos pasos, vuelve a correr:

php artisan serve --port=8000

Y prueba de nuevo la ruta:

http://localhost:8000/login


Conesto debera solucionar el problema.


Si no se tiene Laravel UI instalado aún en el equipo nuevo, debemos asegúrarnos de instalarlo (solo una vez):

    $ composer require laravel/ui


Ahora en RegisterController debemos dirigi a rai en lugar de home

    protected $redirectTo = '/home';


Lo mismo en LoginController que es el encargado de gestionarl el login, 

    protected $redirectTo = '/';

Ahora ya si actualizamos el home, este ya no existira mas, volvemos a inicio y aunque estemos autenticados no habra forma de saberlo.



En login.blade.php

queda nuestros cuadros de texto de la siguiente manera:

<div class="form-group {{ $errors->has('email') ? 'has-error' : '' }} has-feedback">
    <input id="email" type="email" class="form-control @error('email') is-invalid @enderror" name="email" value="{{ old('email') }}" required autocomplete="email" autofocus placeholder="Correo electronico">


Es necesari darle el nombre email y el valor old lo que hara es que al valor que ingresemos persista en caso de que haya un error de validación.

Par ano tener que volver a escribirlo,

Reuired es para que no nos permita enviar el campo vacio.
Autofocus para que el cursor se hubique en este campo y podemas comenzar a escribir inmediatamente  despues de cargar la pagina, copiamos ey en el input pegamos, 
en la siguiente sección 

     @error('email')
        <span class="invalid-feedback" role="alert">
            <strong>{{ $message }}</strong>
        </span>
    @enderror

Es donde se muestran los errores de vaicación, copiamos y pegamos debajo del input

Ahora con el Password, dejando el name y el required

Tambenel campo password lleva si contexto para el manejo de errores.

 @error('password')
    <span class="invalid-feedback" role="alert">
        <strong>{{ $message }}</strong>
    </span>
@enderror


No incluiremos recordar pass

Al igual que la plantilla de administración es importante actualizar las rutas de los CSS y los Js, quedando por ejemplo:

<link rel="stylesheet" href="../dashboard/build/css/bootstrap.css">
    
    <!-- Style -->
    <link rel="stylesheet" href="../dashboard/build/css/style_002.css">

    <!-- Estilos de Login -->
    <link rel="stylesheet" href="../dashboard/build/css/style.css">


# Iniciar Sesioin

En la terminal tenemos un comando para interactura con la aplicación.

    $ php artisan tinker

Tenemos a la palicación de Laravel, creamos un usuario interactuando con el modelos de la aplicación, desde:

app\Models\User.php

Creamos una nueva instancia

    >>> $user = new App\Models\User;

 Le agregamos un nombre

    >>> $user->name = "Klvst3r"

Le agregamos un email 
    >>> $user->email = "klvst3r@email.com"

Por ultimo una contraseña, algo a tener en cuenta es no almacenar conraseñas en texto plano, podemos almacenarlos encruptados, para ello Laravel nos provee de la funcion bcrypt, como parametro el pass que deseamos"
    >>> $user->password = bcrypt('desarrollo')

Generando una cadena de caracteres, es decir el password encriptado, ahora solo falta almacenarlo en la blade
    >>> $user->save()

Podemos verificar en la Bd, ahora intentamos acceder con el correo.

    klvst3r@emai.com / desarrollo


Abrimos nuestra sesión, pero sera necesario redirigir nuestro panel de administración, asi que cambiamos la ruta a home 


Route::get('admin', function(){
    return view('admin.dashboard');
});


Cambiamos la ruta a:


Route::get('home', function(){
    return view('admin.dashboard');
});


Ahora si abrimos por ejemplo 

    http://localhost:8000/home

Desde otro navegador sin autenticarme, nos marcara error por que se esta intentando obtener una propiedad de un no-objeto, lo que sucede es que estamos tratando de acceder al usuario autenticados en el dashboard

<h2>Usuario Autenticado: {{ auth()->user()->name }}</h2>


Pero en el caso contreo al no haber iniciado sesión no hay ninguno, entonces mediante un middleware, para acceder solo si tenemos una sesion abierta o tener una cuneta en el sistema.


Para ello agregamos el middleware en el acceso a la ruta d ela siguiente manera:

Route::get('home', function(){
    return view('admin.dashboard');
})->middleware('auth');

Ahora si accedemos a esta misma url vemos que redirecciona al login y ahora si accedemos desde ahi ahora podemos acceder al home, y si hacemos click en el login nos redireccionara al home ya que la sessión ya esta abierta.


Asi Laravel UI al ser Legacy es utilizado por la sencilla razon de que tenemos bootstrap en lugar de Beutify y no utilizamos React o Vue JS.

Si sustituimos a Bootstrap podremos sustituilo por TailwindCSS y utiliizar Breeze, que es una excelente pcion para la autentificación.

$   php artisan breeze:install

Para instalar los paquetes necesarios para la autenticación. Permitir entenderlos sin problema.

Fortify podremos utilizarso si tenemos un satck Frontend si el fornt no esta incluso en nuestra aplicación, es decir, puede servir para un sistema de autenticación de uns SPA, como no estamos haciendo uso de autenticacion por tokens o por cookies, de ncaso contrario podermos dar paso a Sanctum con Fortify. Pero hay que tener en cuenta que estos paquetes no son escluyentes.

Jetstream es ideal cuando ya tenesmo experiencia con la autenticación e laravel ya que ocupa Fortify, con el requisito es TailwindCSS es que se conozca blade con sus mejoras.

Jetstream puede incluir Inertia que reuqiere un mayor nivel de conocimiento, con Vue JS o React, y por ultimo Laravel Passwort, es cimplemente necesario para hacer uso de una implementación OAth2.


En nuestro caso utilizaremos laravel UI.

Implementamos nuestro sistema de autenticación

Nuestra redirección se realiza si se esta autenticado, Estando autenticado, nos redirecciona a la ura home, pero nuestro caso es que si queremos que nos envie por ejemplo al dashboard, podemos cambiar la ruta en el middleware RediretAuthenticated

Pero es mejor cambiar la constante HOME, en el archivo 

App\Providers\RouteServiceProvider.php


En la constante HOME = '/dashboard';

Ahora si intentamos acceder al login, vemos que redirecciona al dashboard, si estamos en home y queremos ir al hogin nos redirecciona, tambien. 


La opcion recuerdame, funciona cuando el usuario con el que nos registramos falla y no hay algun feedback y no sabemos la razon de por que no permite entrar, eso se soluciona con la opcion recuerdame


# Funcion recuerdame
En el formulario de login, necesitamos un parametro en el session guard, que por defecto es falso, en el middleware SessionGuard

Para recordar la sesion, que crea una cookie que ocntemga la sesion, 


El token de session es simplemente una cadena de 60 caracteres luego a traves del provider que es 

EloquentProvider 

Se llamado el token updatedRememberToken que finalmente setea el campo remember en la instancia, luego antes de guardarlo en a Bd dashabilita los timestamps para evitar que cambie la s fehca devolviendo a su estado normal.  


Entonces cuando se crea el usuario se crea la cookie, con el uso del identificdor del usuario.

Todo ello se encuatra en el trait 

    vendor/laravel/framework/src/Illuminate/Auth/Authenticable

{como segundo parametro podemos pasar si se reuiqre recordar o no la sessión, y para darle la opcoin al usuario, se agrega por ello el checkbox en ellogin.}


Todo esto es por que la aplicación tiene un tiempo de vida de dos horas para recordar la seession abierta si se esta dshabilitada, expirando la sessión tendremos que volver a logearnos.



# Validar e usuario 

La implementacion es por la opcion de validate que reciben un array con las reglas de validación.

Con las reglas de validación en el formulario, esto ns genera errores de validación en la pagina, en todas las vistas, tenemos acceso a la variable errors.

Es una instancia del objeto:

    Illumintae\Support\ViewBag

Se pueden mostrar en lista con un foreach

@foreach($errors->all() )
El metodo all(9 devuelve los errores en forma de array.)


Estos mensajes los traen de los archivos locales,

Otra forma de mostrar errores es omostrandolos debajo del campo como lo tenemos implementado, que no cumple la validación, que con la ayuda de la directiva de blade @error, que recibe como parametro e nombre del campo cuyo error queremos mostrar,


que con el uso de la variable {{ $message }} podemos imprmiri

Si la validación pasa, cuando las credenciales son incorretas, luego de la validación verifica las credenciales enla ruta

if(Auth::attemp($credentials, $remember)){
    request()->session()->regenerate():
    return redirect('dashboard')
}

return redirect('login');

Podemos disparar un error de validación, 

de ahi nuestro mensaje Las credenciales no coinciden co nuestros registros.

ya que el  

throw ValidationException::withMessages([
    'email' => 'Estas credenciales no coinciden con nuestros registros'
]);


Estos mensajes se reciben de los archivos de traducción vistos anteriormente.

podemos hacer uso de la funcion:

throw ValidationException::withMessages([
    'email' => __('auth.failed)
])

Esto mostrara el mensaje que se encuentradentro del archivo auth, y se llama failed

Esto hace referencia al archivo

resources/lang/en/auth.php


la llave failed

que devuelve

'failed' => 'These credentials do not match our records.'


Que es el mensaje traducida, en la traducción de la aplicación.


si se envian las credenciales correctas, mostraremos un usuario sino un mensaje de sessión.

La llave status en la ruta es la que debemoshacer referencia en la vista.

En el dashboard podremos enviar el mensaje de infgreso exitoso tal cual lo muestra e archivo 

/views/home.blade.php


@extends('layout.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">{{ __('Dashboard') }}</div>

                <div class="card-body">
                    @if (session('status'))
                        <div class="alert alert-success" role="alert">
                            {{ session('status') }}
                        </div>
                    @endif

                    {{ __('You are logged in!') }}
                </div>
            </div>
        </div>
    </div>
</div>
@endsection



Que extiende el layout.app y con el mensaje.


Para evitar repertir podremos agregar la acción en el van del dashboard.

 Con unamensaje de la llave 
 @if(session('status'))

    estructura Html necesaria
    {{ session('status) }}
@endif


Asi cuando ingresemos las credenciales correctas, veremos nuestro mensaje. o lo que es mejor redireccionar al dashboard.


El mensaje dura una sola petición, es deir que si actualizamos el mensaje desaparece, 


 Eliminando las coccies para cerrar sessión, 



Hay algo que es necesario y es cerrar session, antes es puede borrarse elemail cuando es incorrecto el ingreso y se debe volver a escribir nuevamente 

Paraque el valor prevaezca podemos agregarlo dentro de value la funcion old con el parametro que queremos recordar, por ello tenemos para el correo:


value="{{ old('email') }}" 

hay que tener cuidado con los datos sensibles, como las conraseñas por eso solo se agrega en el email, y si el usuario fue introducido con uno no existente en la Bd, lo devolvera alformulario de ingreso para no tener que escribirlo nuevamante.

Podemosagregar require para validar del lado del cliente, tenemos tambien un autofocus, para que el cursos se ubique en el primer campo del formulario.


Para cerrar vamos a hacer la extracción a un controlador dedicado, con un metodo 

Lo podemos crear con

    $ php artisan make:controller Auth/LoginController


En nuestro caso ya existe al utilizar Laravel UI

Vamos a extraser lo que existe en la ruta wen 
Creamos     
 y copiamos todo lo que se tiene en la ruta pegandolo en el metodo 


# Cierre de sesion


Para crerrar sesión es reomendable utilizar el metodo post, en lugar del metodo get, ya que de esa manera podemos ptotegernos contra, ataques CRSF.

entonces para crear el metodo post debemos crear un formulario, la acción sera logout
En nuestro template de la liga iremos a:


Vamos a crear nuestro enlace hacia el logout
<form action="/logout " method="POST">
                      @csrf
                      <a class="dropdown-item"  href="#"><i class="fa fa-sign-out pull-right"></i> Log Out</a>
                    </form>

De momento no tiene ninguna acción, para ello necesitamos un boton de tipo submit, para que pueda enviarse, y c el uso de Js se envie el formulario para ello tiene en escucha el evento onclick="", se envia mediante un id, o dandole u nombre o en este caso vamos a uscar el formulario padre, o el formulario que contiene el elemento que estamos haciendo click de esta forma queda:

<form action="/logout " method="POST">
                      @csrf
                      <a class="dropdown-item"  href="#" onclick="this.closest('form').submit()">
                        <i class="fa fa-sign-out pull-right"></i> Log Out
                      </a>
                      
                    </form>

Para hacer referencia al form padre, una vez que se tiene el formulario lo enviamos con el metodo submit, debe enviarse ahora correctamente.



Ahora vamos a implementar la ruta que va a procesar el formulario
en el archvo de rutas web podemos duplicar la linea y tener la siguiente:

Route::post('logout', [LoginController::class, 'logout'])->name('logout');

Agregamos el controlador para agragr el metodo



Considerar que login y logout se sencuentran en el alrchivo sessionguard.php

/home/klvst3r/dev/laravel/travelblog/vendor/laravel/framework/src/Illuminate/Auth/SessionGuard.php


Obtiene el usuario para cerrar sesion con el metodo user, primero verifica si el usuario ya ha cerrado session, en ese caso, retornamos null, en caso contrario si el usuario ya existe en la petición, lo regresa directamente sino se va a verificar si existe una session activa y a traves d ela sesion obtener el usuario y si no obtenerlo del rememertoken.

Luego se eleimina la información del usuario, del amacenameitno es decir se eleiminan los datos de sessión  y las cokies y luego se verifica si existe el remember token en la base de datos, para generar uno nuevo, luego se dispara el evento logout por si queremos hacer una accion cada vez que el usuario cierre sesion y finalmente se setea la pripiedad user a null, y la propiedad logout a verdadero.


Hasta este punto ya estamos cerca de   tener tu botón de logout funcionando correctamente. En Laravel 10 con Laravel UI, el proceso de logout se maneja automáticamente si usas el route /logout y el método POST, que ya estás aplicando. Aquí tienes los pasos detallados para asegurarte de que todo funcione correctamente:

Vamos  verificar la ruta de logout. Laravel UI ya incluye la ruta POST /logout al instalar la autenticación, que apunta al método logout del LoginController.

Podemos confirmarlo con el comando:

    $ php artisan route:list

Buscando una ruta como esta:

    POST   /logout   logout   App\Http\Controllers\Auth\LoginController@logout

En nuestro caso con la versión instalada nos arroja la siguiente salida:

    POST       logout .................................................. logout › Auth\LoginController@logout

Eso confirma que Laravel ya se tiene registrada correctamente la ruta de cierre de sesión (logout) y que está enlazada al método logout dentro de nuestro Auth\LoginController.

Ahora, para terminar debemos asegurarnos de que todo funcione, para ello:

1. Nos Asegúramos de tener el método logout() en LoginController

Laravel UI ya lo incluye por defecto. Solo por revisar:

Aunque anteriormente se definia en el Logincontroller de la siguiente manera:

    public function logout(Request $request)
{
    Auth::logout();

    $request->session()->invalidate();
    $request->session()->regenerateToken();

    return redirect('/login');
}

Al menos para le versión que estamos trabajando, que es Laravel 10, no es necesario definir manualmente el método logout() en nuestro LoginController, porque Laravel ya lo incluye automáticamente a través del trait:

use AuthenticatesUsers;

Este trait (Illuminate\Foundation\Auth\AuthenticatesUsers) ya contiene la lógica completa del logout, incluyendo:

    Auth::logout()

    Invalidar sesión

    Regenerar token

    Redirigir al login


¿Entonces qué hace el método logout?

El método logout que ya existe dentro del trait se ve más o menos así (resumen interno):

    public function logout(Request $request)
    {
        $this->guard()->logout();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return redirect('/');
    }

Así que no es necesario sobrescribirlo, a menos que se quiera cambiar el comportamiento por defecto (por ejemplo, redirigir a /login en lugar de /).    


Si deseamos que al cerrar sesión redirija a /login, puedemos sobrescribir el método así:

use Illuminate\Http\Request;

public function logout(Request $request)
{
    $this->guard()->logout();

    $request->session()->invalidate();
    $request->session()->regenerateToken();

    return redirect('/login')->with('status', 'Sesión cerrada correctamente.');
}

Debemos importar Illuminate\Http\Request si sobrescribimos el método.

Nuestro Controlador queda de la siguiente manera:

    <?php

    namespace App\Http\Controllers\Auth;

    use App\Http\Controllers\Controller;
    use Illuminate\Foundation\Auth\AuthenticatesUsers;
    use Illuminate\Http\Request; // Se Importa Request

    class LoginController extends Controller
    {
        use AuthenticatesUsers;

        protected $redirectTo = '/home';

        public function __construct()
        {
            $this->middleware('guest')->except('logout');
            $this->middleware('auth')->only('logout');
        }

        // Agregamos este método para personalizar el logout
        public function logout(Request $request)
        {
            $this->guard()->logout();

            $request->session()->invalidate();
            $request->session()->regenerateToken();

            return redirect('/login')->with('status', 'Sesión cerrada correctamente.');
        }
    }


Con esto el Logincontroller esta correctamente configurado. El metodo logout() ya esta incluido gracias al trait Authenticateusers.

el formulario en el dashboard con POST /login y @csrf ya esta listo para funcionar. solo debemos personalizar el metodo logout() si necesitamos cambiar la redirección o agregar un mensaje.


En nuestro formuario debe existir dentro del dashboard.blade.php lo siguiente:

---
<form action="{{ route('logout') }}" method="POST">
    @csrf
    <a class="dropdown-item" href="#" onclick="event.preventDefault(); this.closest('form').submit();">
        <i class="fa fa-sign-out pull-right"></i> Log Out
    </a>
</form>


---

Importante: Usar event.preventDefault() evita que el <a> siga el enlace #, y en su lugar, dispara el submit() del formulario.


(Opcional) Agrega un mensaje de éxito tras cerrar sesión

Si deseas mostrar un mensaje tipo “Sesión cerrada correctamente”, puedes hacer lo siguiente en el LoginController@logout:

return redirect('/login')->with('status', 'Sesión cerrada correctamente.');

Y en tu vista de login (login.blade.php), muestra el mensaje si existe:

@if(session('status'))
    <div class="alert alert-success">
        {{ session('status') }}
    </div>
@endif



como paso adicional opcional podemos mostrar el mensaje en la vista login.blade.php, al inicio del formulario de login para mostrar el mensaje de sesion cerrada correctamente.

    @if(session('status'))
        <div class="alert alert-success">
            {{ session('status') }}
        </div>
    @endif

Con eso, al hacer clic en tu botón de "Log Out", nos redirigirá a /login y mostrará el mensaje de confirmación. con esto todo esta listo y funcionando.
correctamente.



# confirmacion de logout

Existen  dos opciones para mostrar una confirmación al cerrar sesión en tu app Laravel con Bootstrap:
 
Opción 1: Modal de Confirmación (antes de cerrar sesión)
--------

Esta opción pide al usuario confirmar que desea cerrar sesión mediante un modal de Bootstrap antes de enviar el formulario.

Paso a paso:
1. Botón que lanza el modal

Reemplaza tu Log Out actual por este botón:

<a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#logoutModal">
    <i class="fa fa-sign-out pull-right"></i> Cerrar sesión
</a>

2. Modal de Bootstrap (colócalo en el mismo layout o blade del dashboard)

<!-- Modal -->
<div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="logoutModalLabel">Confirmar cierre de sesión</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body">
        ¿Estás seguro que deseas cerrar sesión?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>

        <form id="logout-form" action="{{ route('logout') }}" method="POST" class="d-inline">
            @csrf
            <button type="submit" class="btn btn-danger">Cerrar sesión</button>
        </form>
      </div>
    </div>
  </div>
</div>

3. Asegúrate de tener cargado Bootstrap 5 en tu layout

Si usas Laravel UI, ya está incluido. Si no, asegúrate de tener esto en tu layout app.blade.php:

<!-- Bootstrap 5 (CDN) -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

Opción 2: Toast después del logout
---------

Esta opción muestra un toast visual en la vista /login después de cerrar sesión con éxito.

Paso a paso:
1. En LoginController, ya tienes este código:

return redirect('/login')->with('status', 'Sesión cerrada correctamente.');

2. En tu login.blade.php, agrega el toast (al final del body o del contenido):

@if(session('status'))
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div class="toast align-items-center text-white bg-success border-0 show" role="alert">
        <div class="d-flex">
            <div class="toast-body">
                {{ session('status') }}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto"
                data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<script>
    const toastElList = [].slice.call(document.querySelectorAll('.toast'))
    toastElList.map(function (toastEl) {
        new bootstrap.Toast(toastEl).show()
    });
</script>
@endif

Este código muestra el mensaje como un toast verde en la parte inferior derecha al llegar al login.

¿Cuál usar?
Modal	Toast
Confirma acción antes del logout	Informa después del logout
Ideal para seguridad	Ideal para buena experiencia de usuario
Requiere acción del usuario	Se muestra automáticamente