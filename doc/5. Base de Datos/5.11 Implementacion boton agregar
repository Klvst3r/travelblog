Este archivo permite describir la implementación completa y funcional de los tres archivos clave para que se pueda replicar fácilmente en otros proyectos con DataTables y componentes Blade, la inclusion del boton agregar en la vista index.

1. Componente reutilizable: 

resources/views/components/tabla-indice.blade.php


@props(['id', 'createurl' => null])

{{-- Comentario de depuración (puedes eliminarlo después) --}}
{{-- 
<div style="background: yellow; padding: 10px;">
  Valor recibido en createurl: {{ $createurl ?? 'NULO' }}
</div>
--}}

<table
  id="{{ $id }}"
  class="table table-striped dt-indice responsive tabla-con-agregar"
  style="width:100%"
  @if($createurl) data-create-url="{{ $createurl }}" @endif
>
  <thead>
    {{ $thead }}
  </thead>
  <tbody>
    {{ $slot }}
  </tbody>
</table>

@once
  @push('scripts')
    <script src="{{ asset('js/dt-init.js') }}"></script>
  @endpush
@endonce




2. Vista de ejemplo (como plantilla): resources/views/home/index.blade.php

@extends('layout.index')

@section('titulo', 'Posts')
@section('subtitulo', 'Todos los Posts')

@section('content')

<div class="d-flex justify-content-between flex-wrap mb-3">
    @if (session('success'))
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>¡Éxito!</strong> {{ session('success') }}
            <button type="button" class="close" data-dismiss="alert" aria-label="Cerrar">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    @endif

    {{-- Aquí pasamos la URL de crear post dinámicamente --}}
    <x-tabla-indice id="tabla-posts" :createurl="route('home.create')">
        <x-slot name="thead">
            <tr>
                <th>#</th>
                <th>Título</th>
                <th>Extracto</th>
                <th>Categoría</th>
                <th>Publicado</th>
                <th>Acciones</th>
            </tr>
        </x-slot>

        @foreach($posts as $post)
            <tr>
                <td>{{ $loop->iteration }}</td>
                <td>{{ $post->title }}</td>
                <td>{{ Str::limit($post->excerpt, 50) }}</td>
                <td>{{ $post->category->name ?? 'Sin categoría' }}</td>
                <td>{{ $post->published_at }}</td>
                <td class="text-center">
                    <i class="fa fa-pencil text-info" title="Editar" style="cursor:pointer; font-size:20px; margin: 0 5px;"></i>
                    <i class="fa fa-trash text-danger" title="Eliminar" style="cursor:pointer; font-size:20px; margin: 0 5px;"></i>
                </td>
            </tr>
        @endforeach
    </x-tabla-indice>
</div>

@endsection

@push('scripts')
<script>
    setTimeout(() => {
        $('.alert').alert('close');
    }, 4000);
</script>
@endpush



3. Script para inicializar DataTables: public/js/dt-init.js

document.addEventListener("DOMContentLoaded", function () {
  const tables = document.querySelectorAll('.dt-indice');

  tables.forEach(function (table) {
    const $table = $(table);

    if ($table.length) {
      const createUrl = $table.data('create-url'); // Se obtiene desde el atributo HTML

      $table.DataTable({
        dom: 'Bflrtip', // Botones, filtro, paginación, etc.
        buttons: [
          {
            extend: 'copy',
            text: '<i class="fa fa-files-o" style="font-size:20px;"></i>',
            titleAttr: 'Copiar'
          },
          {
            extend: 'csv',
            text: '<i class="fa fa-file-text-o text-secondary" style="font-size:20px;"></i>',
            titleAttr: 'Exportar a CSV'
          },
          {
            extend: 'excel',
            text: '<i class="fa fa-file-excel-o text-success" style="font-size:20px;"></i>',
            titleAttr: 'Exportar a Excel'
          },
          {
            extend: 'pdf',
            text: '<i class="fa fa-file-pdf-o text-danger" style="font-size:20px;"></i>',
            titleAttr: 'Exportar a PDF'
          },
          {
            extend: 'print',
            text: '<i class="fa fa-print text-info" style="font-size:20px;"></i>',
            titleAttr: 'Imprimir'
          }
        ],
        language: {
          url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json',
          search: "Filtrar:",
          lengthMenu: "Mostrar _MENU_ registros por página",
          info: "Mostrando _START_ a _END_ de _TOTAL_ registros",
          paginate: {
            first: "Primero",
            last: "Último",
            next: "Siguiente",
            previous: "Anterior"
          },
          buttons: {
            copyTitle: 'Copiado al portapapeles',
            copySuccess: {
              1: 'Se copió una fila',
              _: 'Se copiaron %d filas'
            }
          },
          zeroRecords: "No se encontraron registros",
          infoEmpty: "Mostrando 0 a 0 de 0 registros",
          infoFiltered: "(filtrado de _MAX_ registros)"
        },
        initComplete: function () {
          if (!createUrl) return;

          const $botonAgregar = $(`
            <div class="ms-auto">
              <a href="${createUrl}" class="btn btn-success">
                <i class="fa fa-plus"></i> Agregar
              </a>
            </div>
          `);

          const $wrapper = $table.closest('.dataTables_wrapper');
          const $btns = $wrapper.find('.dt-buttons');

          if (!$btns.parent().hasClass('d-flex')) {
            $btns.wrap(`
              <div class="d-flex justify-content-between flex-wrap w-100 align-items-center mb-3"></div>
            `);
          }

          $btns.parent().append($botonAgregar);
        }
      });
    }
  });
});

Consideraciones finales

    Podemos usar este mismo componente en cualquier otro módulo, solo necesitamos pasar la URL de creación usando :createurl="route(...)".
    podemos ocultar el debug amarillo (Valor recibido en createurl) eliminando esa línea o comentándola.
    Este enfoque mantiene el código limpio, DRY y flexible para muchos catálogos o entidades.